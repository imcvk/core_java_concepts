In Java, exceptions are used to handle errors or other exceptional events during program execution. These exceptions are broadly categorized into:

‚úÖ Checked Exceptions
Definition: Exceptions that are checked at compile time.
If you don‚Äôt handle them (using try-catch or throws), the code will not compile.

Examples:

IOException

SQLException

FileNotFoundException

ClassNotFoundException

When to Use:
Use checked exceptions when the program should be able to recover from the error or when the error is external to the program (like file handling, database access, etc.).

Example:

java
Copy
Edit
import java.io.*;

public class CheckedExample {
    public static void main(String[] args) throws IOException {
        FileReader fr = new FileReader("test.txt"); // FileNotFoundException
        int i;
        while ((i = fr.read()) != -1) {
            System.out.print((char) i);
        }
        fr.close();
    }
}
‚ùå Unchecked Exceptions
Definition: Exceptions that are not checked at compile time.
They occur at runtime, and the compiler does not require you to handle them.

Examples:

NullPointerException

ArrayIndexOutOfBoundsException

ArithmeticException

IllegalArgumentException

When to Use:
Use unchecked exceptions when it‚Äôs due to programming logic errors, and the application cannot recover from them.

Example:

java
Copy
Edit
public class UncheckedExample {
    public static void main(String[] args) {
        int a = 10;
        int b = 0;
        int result = a / b; // ArithmeticException
        System.out.println(result);
    }
}
üîÅ Summary Table
Aspect	Checked Exception	Unchecked Exception
Checked at compile?	‚úÖ Yes	‚ùå No
Handling required?	‚úÖ Yes	‚ùå No
Package	java.lang.Exception subclass (but not RuntimeException)	java.lang.RuntimeException and its subclasses
Typical Use Cases	File I/O, database, network	Programming bugs like null values or bad logic

Let me know if you want a visual flowchart or a quiz to test understanding!







You said:
